using Gtk 4.0;
using Adw 1;

template $PreferencesDialog: Adw.PreferencesDialog {
  // width-request: 526;
  Adw.PreferencesPage {
    icon-name: "applications-system-symbolic";
    title: _("General");

    Adw.PreferencesGroup {
      title: _("Bottom Image");

      Adw.ExpanderRow use_builtin_icons_expander {
        title: _("Use Built-in Bottom Image");
        expanded: bind use_builtin_icons_button.active;
        enable-expansion: bind use_builtin_icons_button.active;

        [suffix]
        CheckButton use_builtin_icons_button {
          tooltip-text: _("use built-in bottom image");
          valign: center;
          active: true;
        }

        Adw.SwitchRow use_system_color {
          title: _("Use System Folder Color");
        }

        Adw.ComboRow select_bottom_color {
          title: _("Manually Select Folder Color");

          model: StringList {
            strings [
              _("Blue"),
              _("Teal"),
              _("Green"),
              _("Yellow"),
              _("Orange"),
              _("Red"),
              _("Pink"),
              _("Purple"),
              _("Slate"),
              _("Custom"),
            ]
          };

          sensitive: bind use_system_color.active inverted;
        }

        Adw.ActionRow primary_color_row {
          title: _("Primary Color");
          activatable-widget: primary_folder_color;

          [suffix]
          ColorDialogButton primary_folder_color {
            valign: center;
            margin-start: 5;
            rgba: "#A4CAEEFF";

            dialog: ColorDialog {
              with-alpha: false;
            };
          }
        }

        Adw.ActionRow secondary_color_row {
          visible: true;
          title: _("Secondary Color");
          activatable-widget: secondary_folder_color;

          [suffix]
          ColorDialogButton secondary_folder_color {
            valign: center;
            margin-start: 5;
            rgba: "#438DE6FF";

            dialog: ColorDialog {
              with-alpha: false;
            };
          }
        }
      }

      Adw.ExpanderRow use_external_icon_expander {
        title: _("Use Custom Bottom Image");
        expanded: bind use_builtin_icons_button.active inverted;
        enable-expansion: bind use_builtin_icons_button.active inverted;

        [suffix]
        CheckButton use_external_icon_button {
          tooltip-text: _("use custom bottom image");
          valign: center;
          group: use_builtin_icons_button;
        }

        Adw.ActionRow current_botton {
          title: _("Current Image");

          styles [
            "property",
          ]
        }

        Adw.ButtonRow select_default_bottom {
          title: _("Select Image");
          action-name: "win.select_folder_settings";
          start-icon-name: "folder-open-symbolic";
        }
      }
    }

    Adw.PreferencesGroup {
      title: _("Drag and Drop");

      Adw.PreferencesGroup {
        Adw.SwitchRow meta_drop_switch {
          title: _("Allow Drop During Drag");
          subtitle: _("Allow dropping the image back as a layer when dragging");
        }

        Adw.ExpanderRow default_dnd {
          title: _("Default Drag-and-Drop Action");
          subtitle: _("Set a default layer when dropping an image");
          expanded: bind dnd_switch.active;
          enable-expansion: bind dnd_switch.active;

          [suffix]
          Switch dnd_switch {
            tooltip-text: _("Use a default drag and drop action");
            valign: center;
            active: false;
            action-name: "app.dnd_switch";
          }

          Adw.ActionRow {
            title: _("Always select top layer");
            activatable-widget: radio_button_top;

            Gtk.CheckButton radio_button_top {
              active: true;
              valign: center;
            }
          }

          Adw.ActionRow {
            title: _("Always select bottom layer");
            activatable-widget: radio_button_bottom;

            Gtk.CheckButton radio_button_bottom {
              group: radio_button_top;
              valign: center;
            }
          }
        }
      }
    }

    Adw.PreferencesGroup {
      title: _("Regeneration");

      Adw.PreferencesGroup {
        Adw.ExpanderRow {
          title: _("What is Regeneration?");
          activatable: false;

          ListBoxRow {
            activatable: false;

            [child]
            Label {
              wrap: true;
              selectable: true;
              valign: start;
              use-markup: true;
              margin-start: 10;
              margin-end: 10;
              label: _("Iconic is able to <i>Regenerate</i> compatible icons. Regeneration is the ability to change the color of a folder image after it has already been created when the system accent color has been changed.\
This is useful in combination with <a href=\"https://github.com/dpejoh/Adwaita-colors\"><b>Adwaita Colors</b></a> which automatically changes the color of all folders based on the current accent color.\
After regeneration, it is likely required to log out and in to see the changes");
            }
          }
        }

        Adw.SwitchRow automatic_regeneration {
          title: _("Regenerate Automatically");
          subtitle: _("Regenerate images on accent color change");
        }

        Adw.ExpanderRow strict_expander {
          title: _("Loose Regeneration");
          subtitle: _("Allow regeneration of folder images with \"Use system folder color\" disabled");
          expanded: false;
          enable-expansion: bind strict_regeneration.active;

          [suffix]
          Switch strict_regeneration {
            valign: center;
            active: false;
            action-name: "app.strict_regeneration";
          }

          Adw.SwitchRow ignore_custom {
            title: _("Ignore Custom Folders");
            subtitle: _("Don't regenerate folder images with custom folder colors");
          }
        }

        Adw.SwitchRow store_top_images {
          title: _("Store Top Images in Cache");
          subtitle: _("Folder icons made while this option is disabled cannot be regenerated");
        }

        Adw.ActionRow cache_size {
          title: _("Current Cache Usage");
          subtitle: "Unknown";

          styles [
            "property",
            "numeric",
          ]
        }

        Adw.ButtonRow browse_cache {
          title: _("Browse Cached Images");
          start-icon-name: "folder-open-symbolic";
          activated => $open_image_cache() swapped;
        }

        Adw.ButtonRow reset_top_cache {
          title: _("Remove Cached Images");
          start-icon-name: "user-trash-symbolic";

          styles [
            "destructive-action",
          ]
        }
      }
    }

    Adw.PreferencesGroup advanced_settings {
      title: _("Advanced");

      Label {
        margin-top: 10;
        label: _("You can see these options because you have enabled the Devel profile");
        wrap: true;
        valign: start;

        styles [
          "subtitle",
          "warning",
        ]
      }

      Adw.SpinRow svg_image_size {
        title: _("Select size of SVG images");
        subtitle: _("SVG images will by default be converted to a 1024x1024 image. You can adjust that here");

        adjustment: Adjustment {
          lower: 1;
          upper: 102400;
          value: 1024;
          page-increment: 128;
          step-increment: 1;
        };
      }

      Adw.SpinRow thumbnail_image_size {
        title: _("Select size of Thumbnail images");
        subtitle: _("Thumbnail images will by default be converted to a 255x255 image. You can adjust that here");

        adjustment: Adjustment {
          lower: 1;
          upper: 102400;
          value: 255;
          page-increment: 10;
          step-increment: 1;
        };
      }
    }
  }
}
